scalar Date
scalar Email

type User {
  id: ID!
  name: String
  email: Email
}

type Chat {
  id: ID!
  name: String
  messages: [Message]
}

type Message {
  id: ID!
  text: String
  sender: User
  receiver: User
}

type Query {
  chats: [Chat]
  blockedUsers: [User]
}

type Mutation {
  _: Boolean
  registerUser(name: String, email: Email): Boolean
  blockUser(email: Email!): Boolean
  indicatePresence(email: Email!): Boolean
  sendMessage(text: String, receiver: Email!, sender:Email!): Boolean
}

input Pagination {
  offset: Int
  limit: Int
}
input IdOperator {
  eq: ID
  in: [ID!]
  notIn: [ID!]
}


input StringOperator {
  eq: String
  # notEq: String
  contains: [String]
  # notContains: String
  in: [String!]
  notIn: [String!]
  regex: String
}
